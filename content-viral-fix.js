/**
 * üîß Fix definitivo para el bot√≥n de Contenido Viral
 * Este script se ejecuta al cargar la p√°gina para asegurar que todo funcione
 */

console.log('üîß Iniciando diagn√≥stico del bot√≥n de contenido viral...');

// 1. VERIFICAR QUE EL BOT√ìN EXISTE
function verificarBoton() {
    const boton = document.getElementById('generateContentBtn');
    
    if (!boton) {
        console.error('‚ùå Bot√≥n generateContentBtn no encontrado');
        return false;
    }
    
    console.log('‚úÖ Bot√≥n encontrado:', boton);
    return boton;
}

// 2. VERIFICAR QUE LAS FUNCIONES EXISTEN
function verificarFunciones() {
    const funciones = {
        generateViralContent: typeof generateViralContent !== 'undefined',
        callGeminiWithCache: typeof callGeminiWithCache !== 'undefined',
        AppState: typeof AppState !== 'undefined'
    };
    
    console.log('üìä Estado de funciones:', funciones);
    
    if (!funciones.generateViralContent) {
        console.error('‚ùå Funci√≥n generateViralContent no est√° definida');
        return false;
    }
    
    return true;
}

// 3. VERIFICAR QUE LAS TARJETAS DE CONTENIDO FUNCIONEN
function verificarTarjetas() {
    const tarjetas = document.querySelectorAll('.content-type-card');
    
    if (tarjetas.length === 0) {
        console.error('‚ùå No se encontraron tarjetas de contenido');
        return false;
    }
    
    console.log(`‚úÖ Encontradas ${tarjetas.length} tarjetas de contenido`);
    
    // Verificar que tengan event listeners
    let tarjetasActivas = 0;
    tarjetas.forEach((tarjeta, index) => {
        if (tarjeta.onclick || tarjeta.addEventListener) {
            tarjetasActivas++;
        }
    });
    
    console.log(`üìä Tarjetas con eventos: ${tarjetasActivas}/${tarjetas.length}`);
    return tarjetasActivas > 0;
}

// 4. FIX AUTOM√ÅTICO DEL BOT√ìN
function fixBoton() {
    const boton = document.getElementById('generateContentBtn');
    
    if (!boton) {
        console.error('‚ùå No se puede arreglar: bot√≥n no existe');
        return false;
    }
    
    // Limpiar event listeners previos
    const nuevoBoton = boton.cloneNode(true);
    boton.parentNode.replaceChild(nuevoBoton, boton);
    
    // Agregar event listener correcto
    nuevoBoton.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('üöÄ Bot√≥n clickeado - ejecutando generateViralContent');
        
        if (typeof generateViralContent === 'function') {
            generateViralContent();
        } else {
            console.error('‚ùå generateViralContent no est√° definida');
            alert('Error: La funci√≥n de generaci√≥n no est√° disponible. Recarga la p√°gina.');
        }
    });
    
    console.log('‚úÖ Bot√≥n reparado y event listener agregado');
    return true;
}

// 5. FIX DE LAS TARJETAS DE CONTENIDO
function fixTarjetas() {
    const tarjetas = document.querySelectorAll('.content-type-card');
    
    if (tarjetas.length === 0) {
        console.error('‚ùå No hay tarjetas para reparar');
        return false;
    }
    
    // Asegurar que selectedContentTypes est√© definido
    if (typeof selectedContentTypes === 'undefined') {
        window.selectedContentTypes = new Set();
        console.log('‚úÖ Variable selectedContentTypes inicializada');
    }
    
    // Agregar event listeners a todas las tarjetas
    tarjetas.forEach((tarjeta, index) => {
        const tipo = tarjeta.dataset.type;
        
        if (!tipo) {
            console.error(`‚ùå Tarjeta ${index} no tiene data-type`);
            return;
        }
        
        // Limpiar listeners previos clonando
        const nuevaTarjeta = tarjeta.cloneNode(true);
        tarjeta.parentNode.replaceChild(nuevaTarjeta, tarjeta);
        
        // Agregar nuevo listener
        nuevaTarjeta.addEventListener('click', function(e) {
            e.preventDefault();
            console.log(`üéØ Tarjeta clickeada: ${tipo}`);
            
            if (this.classList.contains('selected')) {
                this.classList.remove('selected');
                selectedContentTypes.delete(tipo);
                console.log(`‚ûñ ${tipo} deseleccionado`);
            } else {
                this.classList.add('selected');
                selectedContentTypes.add(tipo);
                console.log(`‚ûï ${tipo} seleccionado`);
            }
            
            console.log('üìù Tipos seleccionados:', Array.from(selectedContentTypes));
        });
        
        // Agregar estilos
        nuevaTarjeta.style.cursor = 'pointer';
        nuevaTarjeta.style.transition = 'all 0.3s ease';
    });
    
    console.log(`‚úÖ ${tarjetas.length} tarjetas reparadas`);
    return true;
}

// 6. FUNCI√ìN PRINCIPAL DE DIAGN√ìSTICO Y REPARACI√ìN
function diagnosticarYReparar() {
    console.log('üîç Iniciando diagn√≥stico completo...');
    
    const diagnostico = {
        botonExiste: verificarBoton(),
        funcionesExisten: verificarFunciones(),
        tarjetasFuncionan: verificarTarjetas()
    };
    
    console.log('üìä Resultado del diagn√≥stico:', diagnostico);
    
    // Intentar reparar problemas encontrados
    if (diagnostico.botonExiste && !diagnostico.funcionesExisten) {
        console.log('üîß Intentando reparar funciones...');
        // Las funciones deber√≠an cargarse desde script.js
    }
    
    if (diagnostico.botonExiste) {
        console.log('üîß Reparando bot√≥n...');
        fixBoton();
    }
    
    if (diagnostico.tarjetasFuncionan || document.querySelectorAll('.content-type-card').length > 0) {
        console.log('üîß Reparando tarjetas...');
        fixTarjetas();
    }
    
    // Verificaci√≥n final
    setTimeout(() => {
        const verificacionFinal = {
            botonFunciona: !!document.getElementById('generateContentBtn'),
            tarjetasFuncionan: document.querySelectorAll('.content-type-card').length > 0,
            variablesExisten: typeof selectedContentTypes !== 'undefined'
        };
        
        console.log('‚úÖ Verificaci√≥n final:', verificacionFinal);
        
        if (verificacionFinal.botonFunciona && verificacionFinal.tarjetasFuncionan) {
            console.log('üéâ ¬°Fix completado! El bot√≥n de contenido viral deber√≠a funcionar');
            
            // Mostrar mensaje al usuario
            if (typeof Utils !== 'undefined' && Utils.showStatus) {
                Utils.showStatus('‚úÖ Bot√≥n de contenido viral reparado', 'success');
            }
        } else {
            console.error('‚ùå Fix fallido. Problemas persistentes detectados');
        }
    }, 1000);
}

// 7. EJECUTAR CUANDO EL DOM EST√â LISTO
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', diagnosticarYReparar);
} else {
    // Si ya est√° cargado, ejecutar inmediatamente
    diagnosticarYReparar();
}

// Tambi√©n ejecutar despu√©s de unos segundos para casos de carga lenta
setTimeout(diagnosticarYReparar, 2000);

// 8. FUNCI√ìN DE EMERGENCIA - EJECUTAR MANUALMENTE DESDE CONSOLA
window.repararContenidoViral = function() {
    console.log('üÜò Ejecutando reparaci√≥n de emergencia...');
    diagnosticarYReparar();
};

console.log('üîß Script de fix cargado. Usa repararContenidoViral() si hay problemas.');